// ***************** DO NOT EDIT ***********************************
// This is a generated file. 
// It will be replaced next time you rebuild.
/*=========================================================================

   Program: ParaView
  Module:    $RCSfile$

   Copyright (c) 2005-2008 Sandia Corporation, Kitware Inc.
   All rights reserved.

   ParaView is a free software; you can redistribute it and/or modify it
   under the terms of the ParaView license version 1.2. 

   See License_v1.2.txt for the full ParaView license.
   A copy of this license can be obtained by contacting
   Kitware Inc.
   28 Corporate Drive
   Clifton Park, NY 12065
   USA

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/
#include "pq@BPC_NAME@Initializer.h"

#include <QApplication>
#include <QBitmap>
#include <QDir>
#include <QSplashScreen>
#include <QtDebug>

#include "@BPC_PVMAIN_WINDOW_INCLUDE@"
#include "pqPVApplicationCore.h"
#include "pqViewManager.h"
#include "pqBrandPluginsLoader.h"
#include "pqOptions.h"
#include "pqOpenFilesEvent.h"

#ifdef Q_WS_X11
#include <QPlastiqueStyle>
#endif

#ifdef Q_WS_MAC
#include <Carbon/Carbon.h>
#include <objc/runtime.h>
#include <objc/message.h>
#endif


//-----------------------------------------------------------------------------
pq@BPC_NAME@Initializer::pq@BPC_NAME@Initializer()
{
  this->PVApp = NULL;
  this->MainWindow = NULL;
  this->Splash = NULL;
}

//-----------------------------------------------------------------------------
pq@BPC_NAME@Initializer::~pq@BPC_NAME@Initializer()
{
  this->cleanupAppleEventHandlers();
  delete this->Splash;
  this->Splash = NULL;

  delete this->MainWindow;
  this->MainWindow = NULL;

  delete this->PVApp;
  this->PVApp = 0;
}
//-----------------------------------------------------------------------------
bool pq@BPC_NAME@Initializer::Initialize(int argc, char* argv[])
{
  this->PVApp = new pqPVApplicationCore (argc, argv);
  if (this->PVApp->getOptions()->GetHelpSelected() ||
      this->PVApp->getOptions()->GetUnknownArgument() ||
      this->PVApp->getOptions()->GetErrorMessage() ||
      this->PVApp->getOptions()->GetTellVersion())
    {
    return false;
    }

#ifndef PARAVIEW_BUILD_SHARED_LIBS
  Q_INIT_RESOURCE(@BPC_NAME@_generated);
  Q_INIT_RESOURCE(@BPC_NAME@_configuration);
  Q_INIT_RESOURCE(@BPC_NAME@_help);
#endif  

  // Create and show the splash screen as the main window is being created.
  QPixmap pixmap("@BPC_SPLASH_RESOURCE@");
  this->Splash = new QSplashScreen(pixmap);
  this->Splash->setMask(pixmap.createMaskFromColor(QColor(Qt::transparent)));
  this->Splash->show();

  // Not sure why this is needed. Andy added this ages ago with comment saying
  // needed for Mac apps. Need to check that it's indeed still required.
  QDir dir(QApplication::applicationDirPath());
  dir.cdUp();
  dir.cd("Plugins");
  QApplication::addLibraryPath(dir.absolutePath());

  // On Mac replace the handler for kAEOpenDocuments and if using Cocoa
  // replace the fileOpen method of QCocoaApplicationDelegate
  this->setupAppleEventHandlers();

  // Create main window.
  this->MainWindow = new @BPC_PVMAIN_WINDOW@();

  // Load required application plugins.
  QString plugin_string = "@BPC_REQUIRED_PLUGINS@";
  QStringList plugin_list = plugin_string.split(';',QString::SkipEmptyParts);
  pqBrandPluginsLoader loader;
  if (loader.loadPlugins(plugin_list) == false)
    {
    qCritical() << "Failed to load required plugins for this application";
    return false;
    }

  // Load optional plugins.
  plugin_string = "@BPC_OPTIONAL_PLUGINS@";
  plugin_list = plugin_string.split(';',QString::SkipEmptyParts);
  loader.loadPlugins(plugin_list, true); //quietly skip not-found plugins.


#if @BPC_HAS_GUI_CONFIGURATION_XMLS@
  // Load configuration xmls after all components have been instantiated.
  // This configuration part is something that needs to be cleaned up, I haven't
  // given this too much thought.
  QDir dir2(":/@BPC_NAME@/Configuration");
  QStringList files = dir2.entryList(QDir::Files);
  foreach (QString file, files)
    {
    this->PVApp->loadConfiguration(QString(":/@BPC_NAME@/Configuration/") + file);
    }
#endif
  this->MainWindow->setWindowTitle("@BPC_TITLE@");
  
  // give GUI components time to update before the mainwindow is shown
  QApplication::instance()->processEvents();
  this->MainWindow->show();

  QApplication::instance()->processEvents();
  this->Splash->finish(this->MainWindow);
  return true;
}

#ifdef Q_WS_MAC
#ifdef QT_MAC_USE_COCOA
//-----------------------------------------------------------------------------
// A method to replace application:openFiles: of QCocoaApplicationDelegate
static void cocoa_odoc_event_handler(id self, SEL _cmd,
                                     id sender,
                                     id filenames)
{
  // need to emulate NSUInteger (that is what [NSArray count] returns)
#if __LP64__ || TARGET_OS_EMBEDDED || TARGET_OS_IPHONE || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64
  typedef unsigned long NSUInteger;
#else
  typedef unsigned int NSUInteger;
#endif
  // some constants we need for the Objective-C runtime
  static const Class clsSelf = object_getClass(self);
  static const SEL selCnt = sel_registerName("count");
  static const SEL selOAI = sel_registerName("objectAtIndex:");
  static const SEL selCSUE = sel_registerName("cStringUsingEncoding:");
  static const SEL selAOF = sel_registerName("application:openFiles:");
  // determine whether we are still launching
  // (have to use Objective-C runtime functions to access instance variables)
  bool inLaunch = false;
  static Ivar ivIL = class_getInstanceVariable(clsSelf, "inLaunch");
  if(ivIL)
    inLaunch = (bool)object_getIvar(self, ivIL);
  // translate NSArray into a QStringList
  NSUInteger cnt = (NSUInteger)objc_msgSend(filenames, selCnt);
  QStringList qtFileNames;
  for(NSUInteger i = 0; i < cnt; ++i)
  {
    id fileName = objc_msgSend(filenames, selOAI, i);
    QString qtFileName = QString::fromUtf8(
        (const char*)objc_msgSend(fileName, selCSUE, 4 /* NSUTF8StringEncoding */));
    if (inLaunch)
    {
      // skip command line arguments that Cocoa translated into an event
      if (QApplication::instance()->arguments().contains(qtFileName))
        continue;
    }
    qtFileNames.append(qtFileName);
  }
  if(qtFileNames.length())
  {
    // Create the actual event
    pqOpenFilesEvent ev(qtFileNames);
    QApplication::instance()->sendEvent(QApplication::instance(), &ev);
  }
  // propagate to the reflectionDelegate stored in the QCocoaApplicationDelegate
  // (have to use Objective-C runtime functions to access instance variables)
  static Ivar ivRD = class_getInstanceVariable(clsSelf, "reflectionDelegate");
  if(ivRD)
  {
    id reflectionDelegate = (id)object_getIvar(self, ivRD);
    if (reflectionDelegate &&
        class_respondsToSelector(object_getClass(reflectionDelegate), selAOF))
    {
      objc_msgSend(reflectionDelegate, selAOF, sender, filenames);
    }
  }
}
#endif // QT_MAC_USE_COCOA

//-----------------------------------------------------------------------------
// The Carbon event handler for kAEOpenDocuments
static OSStatus carbon_odoc_event_handler(const AppleEvent *ae, AppleEvent *, long)
{
  OSStatus stat = eventNotHandledErr;
  OSType aeClass=typeWildCard;
  AEGetAttributePtr(ae, keyEventClassAttr, typeType, 0, &aeClass, sizeof(aeClass), 0);
  OSType aeID=typeWildCard;
  AEGetAttributePtr(ae, keyEventIDAttr, typeType, 0, &aeID, sizeof(aeID), 0);
  if(aeClass == kCoreEventClass && aeID == kAEOpenDocuments)
  {
    AEDescList filenames;
    if(AEGetParamDesc(ae, keyDirectObject, typeAEList, &filenames) == noErr)
    {
      long n = 0;
      AECountItems(&filenames, &n); ++n;
      UInt8 buf[PATH_MAX];
      QStringList qtFileNames;
      for(long i = 1; i < n; i++)
      {
        FSRef aeData;
        if(AEGetNthPtr(&filenames, i, typeFSRef, NULL, NULL, &aeData, sizeof(aeData), 0) != noErr)
          continue;
        FSRefMakePath(&aeData, buf, PATH_MAX);
        qtFileNames.append(QString::fromUtf8((const char *)buf));
      }
      if(qtFileNames.length())
      {
        pqOpenFilesEvent ev(qtFileNames);
        QApplication::instance()->sendEvent(QApplication::instance(), &ev);
      }
      stat = noErr;
    }
  }
  return stat;
}
#endif // Q_WS_MAC

//-----------------------------------------------------------------------------
// To hold the return value of NewAEEventHandlerUPP, to be cleared with
// DisposeAEEventHandlerUPP
static AEEventHandlerUPP carbon_odoc_event_handlerUPP = NULL;

//-----------------------------------------------------------------------------
void pq@BPC_NAME@Initializer::setupAppleEventHandlers()
{
#ifdef Q_WS_MAC
#ifdef QT_MAC_USE_COCOA
  // install the Cocoa event-handler by replacing the method openFiles.
  const SEL selSA = sel_registerName("sharedApplication");
  const SEL selD = sel_registerName("delegate");
  const SEL selAOF = sel_registerName("application:openFiles:");
  id qtCocoaDelegate = objc_msgSend(objc_msgSend(
        objc_getClass("NSApplication"), selSA), selD);
  if(qtCocoaDelegate)
    method_setImplementation(class_getInstanceMethod(
          object_getClass(qtCocoaDelegate),selAOF),
        (IMP)cocoa_odoc_event_handler);
#endif // QT_MAC_USE_COCOA
  // always install the Carbon event-handler (used before NSApplication
  // installed its own event handlers)
  if (!carbon_odoc_event_handlerUPP)
  {
    carbon_odoc_event_handlerUPP = NewAEEventHandlerUPP(AEEventHandlerUPP(carbon_odoc_event_handler));
    AEInstallEventHandler(kCoreEventClass, kAEOpenDocuments,
        carbon_odoc_event_handlerUPP, SRefCon(QApplication::instance()), false);
  }
#endif // Q_WS_MAC
}

//-----------------------------------------------------------------------------
void pq@BPC_NAME@Initializer::cleanupAppleEventHandlers()
{
#ifdef Q_WS_MAC
  // Dispose of the Carbon event handler
  // do not remove the event-handlers, that is taken care of by qt_cleanup()
  if (carbon_odoc_event_handlerUPP)
  {
    DisposeAEEventHandlerUPP(carbon_odoc_event_handlerUPP);
    carbon_odoc_event_handlerUPP = NULL;
  }
#endif // Q_WS_MAC
}

// ***************** DO NOT EDIT ***********************************
