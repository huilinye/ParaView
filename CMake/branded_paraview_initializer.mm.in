// ***************** DO NOT EDIT ***********************************
// This is a generated file.
// It will be replaced next time you rebuild.
/*=========================================================================

   Program: ParaView
   Module:    $RCSfile$

   Copyright (c) 2009 Michael Wild, Sandia Corporation, Kitware Inc.
   All rights reserved.

   ParaView is a free software; you can redistribute it and/or modify it
   under the terms of the ParaView license version 1.2.

   See License_v1.2.txt for the full ParaView license.
   A copy of this license can be obtained by contacting
   Kitware Inc.
   28 Corporate Drive
   Clifton Park, NY 12065
   USA

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=========================================================================*/

#include "pq@BPC_NAME@Initializer.h"
#include "pqOpenFilesEvent.h"

#include <QApplication>
#ifndef Q_WS_MAC
#  error "This file is only for Mac OS X"
#endif // Q_WS_MAC

#include <Carbon/Carbon.h>
#include <objc/runtime.h>

#ifdef QT_MAC_USE_COCOA
//-----------------------------------------------------------------------------
// A method to replace application:openFiles: of QCocoaApplicationDelegate
static void cocoa_odoc_event_handler(id self, SEL _cmd,
                                     NSApplication* sender,
                                     NSArray* filenames)
{
  // determine whether we are still launching
  // (have to use Objective-C runtime functions to access instance variables)
  bool inLaunch = false;
  static Ivar ivIL = class_getInstanceVariable([self class], "inLaunch");
  if(ivIL)
    inLaunch = (bool)object_getIvar(self, ivIL);
  // translate NSArray into a QStringList
  QStringList qtFileNames;
  for (NSString *fileName in filenames)
  {
    QString qtFileName = QString::fromUtf8(
        [fileName cStringUsingEncoding:NSUTF8StringEncoding]);
    if (inLaunch)
    {
      // skip command line arguments that Cocoa translated into an event
      if (QApplication::instance()->arguments().contains(qtFileName))
        continue;
    }
    qtFileNames.append(qtFileName);
  }
  if(qtFileNames.length())
  {
    // Create the actual event
    pqOpenFilesEvent ev(qtFileNames);
    QApplication::instance()->sendEvent(QApplication::instance(), &ev);
  }
  // propagate to the reflectionDelegate stored in the QCocoaApplicationDelegate
  // (have to use Objective-C runtime functions to access instance variables)
  static Ivar ivRD = class_getInstanceVariable([self class], "reflectionDelegate");
  if(ivRD)
  {
    id reflectionDelegate = (id)object_getIvar(self, ivRD);
    if (reflectionDelegate &&
        [reflectionDelegate respondsToSelector:@selector(application:openFiles:)])
    {
      [reflectionDelegate application:sender openFiles:filenames];
    }
  }
}
#endif // QT_MAC_USE_COCOA
//-----------------------------------------------------------------------------
// The Carbon event handler for kAEOpenDocuments
static OSStatus carbon_odoc_event_handler(const AppleEvent *ae, AppleEvent *, long)
{
  OSStatus stat = eventNotHandledErr;
  OSType aeClass=typeWildCard;
  AEGetAttributePtr(ae, keyEventClassAttr, typeType, 0, &aeClass, sizeof(aeClass), 0);
  OSType aeID=typeWildCard;
  AEGetAttributePtr(ae, keyEventIDAttr, typeType, 0, &aeID, sizeof(aeID), 0);
  if(aeClass == kCoreEventClass && aeID == kAEOpenDocuments)
  {
    AEDescList filenames;
    if(AEGetParamDesc(ae, keyDirectObject, typeAEList, &filenames) == noErr)
    {
      long n = 0;
      AECountItems(&filenames, &n); ++n;
      UInt8 buf[PATH_MAX];
      QStringList qtFileNames;
      for(long i = 1; i < n; i++)
      {
        FSRef aeData;
        if(AEGetNthPtr(&filenames, i, typeFSRef, NULL, NULL, &aeData, sizeof(aeData), 0) != noErr)
          continue;
        FSRefMakePath(&aeData, buf, PATH_MAX);
        qtFileNames.append(QString::fromUtf8((const char *)buf));
      }
      if(qtFileNames.length())
      {
        pqOpenFilesEvent ev(qtFileNames);
        QApplication::instance()->sendEvent(QApplication::instance(), &ev);
      }
      stat = noErr;
    }
  }
  return stat;
}
//-----------------------------------------------------------------------------
static AEEventHandlerUPP carbon_odoc_event_handlerUPP = NULL;
//-----------------------------------------------------------------------------
void pq@BPC_NAME@Initializer::setupAppleEventHandlers()
{
#ifdef QT_MAC_USE_COCOA
  // install the Cocoa event-handler by replacing the method openFiles.
  id qtCocoaDelegate = [[NSApplication sharedApplication] delegate];
  if(qtCocoaDelegate)
    method_setImplementation(class_getInstanceMethod(
          [qtCocoaDelegate class],@selector(application:openFiles:)),
        (IMP)cocoa_odoc_event_handler);
#endif // QT_MAC_USE_COCOA
  // always install the Carbon event-handler (used before NSApplication
  // installed its own event handlers)
  if (!carbon_odoc_event_handlerUPP)
  {
    carbon_odoc_event_handlerUPP = NewAEEventHandlerUPP(AEEventHandlerUPP(carbon_odoc_event_handler));
    AEInstallEventHandler(kCoreEventClass, kAEOpenDocuments,
        carbon_odoc_event_handlerUPP, SRefCon(QApplication::instance()), false);
  }
}
//-----------------------------------------------------------------------------
void pq@BPC_NAME@Initializer::cleanupAppleEventHandlers()
{
  // Dispose of the Carbon event handler
  // do not remove the event-handlers, that is taken care of by qt_cleanup()
  if (carbon_odoc_event_handlerUPP)
  {
    DisposeAEEventHandlerUPP(carbon_odoc_event_handlerUPP);
    carbon_odoc_event_handlerUPP = NULL;
  }
}

// ***************** DO NOT EDIT ***********************************
